version: 2.1

orbs:
  heroku: circleci/heroku@2.0.0

jobs:
  checkout_code:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/project

  test_frontend:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - restore_cache:
          keys:
            - repo-{{ .Environment.CIRCLE_SHA1 }}
            - repo-
      - restore_cache:
          keys:
            - node-{{ checksum "frontend/package-lock.json" }}
            - node-
      - run:
          command: |
            cd frontend
            npm install
            npm test -- --runInBand --coverage --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - save_cache:
          paths:
            - frontend/node_modules
          key: node-{{ checksum "frontend/package-lock.json" }}
      - store_artifacts:
          path: frontend/coverage
      - store_test_results:
          path: frontend/reports/junit/
      - store_artifacts:
          path: frontend/reports/junit

  #  test_gpi:
  #    docker:
  #      - image: cimg/go:1.21
  #      - image: mongo:7.0.4
  #        environment:
  #          MONGO_INITDB_DATABASE: ntf-db-test
  #    resource_class: large
  #    parallelism: 5
  #    environment:
  #      TEST_RESULTS: /tmp/test-results
  #    steps:
  #      - run: mkdir -p $TEST_RESULTS
  #      - restore_cache:
  #          keys:
  #            - repo-{{ .Environment.CIRCLE_SHA1 }}
  #            - repo-
  #      - restore_cache:
  #          keys:
  #            - go-mod-{{ checksum "gpi/go.sum" }}
  #      - run:
  #          name: Run unit tests
  #          command: |
  #            cd gpi/internal
  #            PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings)
  #            gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES
  #      - store_artifacts:
  #          path: /tmp/test-results
  #          destination: raw-test-output
  #      - store_test_results:
  #          path: /tmp/test-results
  #
  #  check_gpi:
  #    docker:
  #      - image: cimg/go:1.21
  #    resource_class: large
  #    steps:
  #      - restore_cache:
  #          keys:
  #            - repo-{{ .Environment.CIRCLE_SHA1 }}
  #            - repo-
  #      - restore_cache:
  #          keys:
  #            - go-mod-{{ checksum "gpi/go.sum" }}
  #      - run:
  #          name: Examining code
  #          command: |
  #            cd gpi
  #            go vet ./...

  deploy_frontend:
    docker:
      - image: cimg/node:lts
    resource_class: large
    steps:
      - restore_cache:
          keys:
            - repo-{{ .Environment.CIRCLE_SHA1 }}
            - repo-
      - restore_cache:
          keys:
            - node-{{ checksum "frontend/package-lock.json" }}
            - node-
      - run:
          command: |
            cd frontend
            export VERCEL_PROJECT_ID="$VERCEL_FRONTEND_PROJECT_ID"
            npx vercel --prod -c -t $VERCEL_TOKEN

workflows:
  build-and-deploy:
    jobs:
      - checkout_code:
          name: checkout code
          filters:
            branches:
              only:
                - main
                - /dependabot\/.*/

      #      - check_gpi:
      #          name: check gpi
      #          requires:
      #            - checkout code

      - test_frontend:
          name: test frontend
          requires:
            - checkout code

      #      - test_gpi:
      #          name: test golang api
      #          requires:
      #            - check gpi

      #      - heroku/deploy-via-git:
      #          name: deploy gpi
      #          requires:
      #            - test golang api
      #            - test frontend
      #          app-name: ntf-gpi
      #          filters:
      #            branches:
      #              only:
      #                - main

      - deploy_frontend:
          name: deploy frontend
          requires:
            - test golang api
            - test frontend
          filters:
            branches:
              only:
                - main